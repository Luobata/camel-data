{"version":3,"file":"camel.esm.js","sources":["../src/transform.ts","../src/help.ts","../src/camel.ts"],"sourcesContent":["/**\r\n * @description data transform to camel\r\n */\r\n\r\nexport default (input: string): string => {\r\n    return input.replace(/[-_][^-_]/g, (match: string) => {\r\n        return match.charAt(1).toUpperCase();\r\n    });\r\n};\r\n","/**\n * @description type help\n */\n// tslint:disable no-any no-unsafe-any\n\nexport function isString(obj: any): obj is string {\n    return Object.prototype.toString.call(obj) === '[object String]';\n}\n\nexport function isArray(obj: any): obj is Array<any> {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n}\n\nexport function isObject(obj: any): obj is object {\n    return Object.prototype.toString.call(obj) === '[object Object]';\n}\n","/**\r\n * @description canel\r\n */\r\nimport { allCamel, camel, isCamel, ICamel } from '@/interface';\r\nimport trans from '@/transform';\r\nimport { isArray, isString, isObject } from '@/help';\r\n\r\nconst camelTrans: Function = (input: camel): camel => {\r\n    if (isArray(input)) {\r\n        // ICamel[]\r\n        return input.map(\r\n            (v: allCamel): allCamel => {\r\n                return <allCamel>camelTrans(v);\r\n            },\r\n        );\r\n        // } else if (isCamel(input)) {\r\n    } else if (isObject(input)) {\r\n        // ICamel\r\n        const result: ICamel = {};\r\n        const keys: string[] = Object.keys(input);\r\n        for (const i of keys) {\r\n            if (isObject(input[i])) {\r\n                result[<string>camelTrans(i)] = camelTrans(input[i]);\r\n            } else if (isArray(input[i])) {\r\n                // default not to trans Array in object key\r\n                // as it may just be a value\r\n                result[<string>camelTrans(i)] = input[i];\r\n            } else {\r\n                result[<string>camelTrans(i)] = input[i];\r\n            }\r\n        }\r\n\r\n        return result;\r\n    } else if (isString(input)) {\r\n        // string\r\n        return trans(input);\r\n    } else {\r\n        return input;\r\n    }\r\n};\r\n\r\n// camelTrans.config = {};\r\n\r\nexport default camelTrans;\r\n"],"names":["input","replace","match","charAt","toUpperCase","obj","Object","prototype","toString","call","camelTrans","isArray","map","v","isObject","result","keys","i","isString","trans"],"mappings":"AAAA;;;AAIA,aAAe,UAACA,KAAD;WACJA,MAAMC,OAAN,CAAc,YAAd,EAA4B,UAACC,KAAD;eACxBA,MAAMC,MAAN,CAAa,CAAb,EAAgBC,WAAhB,EAAP;KADG,CAAP;CADJ;;ACJA;;;;AAKA,kBAAyBC;WACdC,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BJ,GAA/B,MAAwC,iBAA/C;;AAGJ,iBAAwBA;WACbC,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BJ,GAA/B,MAAwC,gBAA/C;;AAGJ,kBAAyBA;WACdC,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BJ,GAA/B,MAAwC,iBAA/C;;;ACPJ,IAAMK,aAAuB,SAAvBA,UAAuB,CAACV,KAAD;QACrBW,QAAQX,KAAR,CAAJ,EAAoB;;eAETA,MAAMY,GAAN,CACH,UAACC,CAAD;mBACqBH,WAAWG,CAAX,CAAjB;SAFD,CAAP;;KAFJ,MAQO,IAAIC,SAASd,KAAT,CAAJ,EAAqB;;YAElBe,SAAiB,EAAvB;YACMC,OAAiBV,OAAOU,IAAP,CAAYhB,KAAZ,CAAvB;;;;;;iCACgBgB,IAAhB,8HAAsB;oBAAXC,CAAW;;oBACdH,SAASd,MAAMiB,CAAN,CAAT,CAAJ,EAAwB;2BACLP,WAAWO,CAAX,CAAf,IAAgCP,WAAWV,MAAMiB,CAAN,CAAX,CAAhC;iBADJ,MAEO,IAAIN,QAAQX,MAAMiB,CAAN,CAAR,CAAJ,EAAuB;;;2BAGXP,WAAWO,CAAX,CAAf,IAAgCjB,MAAMiB,CAAN,CAAhC;iBAHG,MAIA;2BACYP,WAAWO,CAAX,CAAf,IAAgCjB,MAAMiB,CAAN,CAAhC;;;;;;;;;;;;;;;;;;eAIDF,MAAP;KAhBG,MAiBA,IAAIG,SAASlB,KAAT,CAAJ,EAAqB;;eAEjBmB,MAAMnB,KAAN,CAAP;KAFG,MAGA;eACIA,KAAP;;CA9BR;;;;"}