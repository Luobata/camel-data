{"version":3,"file":"camel.esm.js","sources":["../src/help.ts","../src/transform.ts","../src/camel.ts"],"sourcesContent":["/**\n * @description type help\n */\n// tslint:disable no-any no-unsafe-any\n\nexport function isString(obj: any): obj is string {\n    return Object.prototype.toString.call(obj) === '[object String]';\n}\n\nexport function isArray(obj: any): obj is any[] {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n}\n\nexport function isObject(obj: any): obj is object {\n    return Object.prototype.toString.call(obj) === '[object Object]';\n}\n","/**\n * @description data transform to camel\n */\n\nexport default (input: string): string => {\n    return input.replace(/[-_\\.][^-_\\.]/g, (match: string) => {\n        return match.charAt(1).toUpperCase();\n    });\n};\n","/**\n * @description canel\n */\nimport { isArray, isObject, isString } from '@/help';\nimport { allCamel, camel, ICamel } from '@/interface';\nimport trans from '@/transform';\n\n// tslint:disable no-any no-unsafe-any\n\nconst camelTrans: Function = (input: camel): camel => {\n    if (isArray(input)) {\n        // type ICamel[]\n        return input.map(\n            (v: allCamel): allCamel => {\n                return <allCamel>camelTrans(v);\n            },\n        );\n        // } else if (isCamel(input)) {\n    } else if (isObject(input)) {\n        // typ ICamel\n        const result: ICamel = {};\n        const keys: string[] = Object.keys(input);\n        for (const i of keys) {\n            if (isObject(input[i])) {\n                result[<string>camelTrans(i)] = camelTrans(input[i]);\n            } else if (isArray(input[i])) {\n                // default not to trans Array in object key\n                // as it may just be a value\n                result[<string>camelTrans(i)] = input[i];\n            } else {\n                result[<string>camelTrans(i)] = input[i];\n            }\n        }\n\n        return result;\n    } else if (isString(input)) {\n        // string\n        return trans(input);\n    } else {\n        return input;\n    }\n};\n\n// camelTrans.config = {};\n\nexport default camelTrans;\n"],"names":["obj","Object","prototype","toString","call","input","replace","match","charAt","toUpperCase","camelTrans","isArray","map","v","isObject","result","keys","i","isString","trans"],"mappings":"AAAA;;;;AAKA,kBAAyBA;WACdC,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BJ,GAA/B,MAAwC,iBAA/C;;AAGJ,iBAAwBA;WACbC,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BJ,GAA/B,MAAwC,gBAA/C;;AAGJ,kBAAyBA;WACdC,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BJ,GAA/B,MAAwC,iBAA/C;;;ACdJ;;;AAIA,aAAe,UAACK,KAAD;WACJA,MAAMC,OAAN,CAAc,gBAAd,EAAgC,UAACC,KAAD;eAC5BA,MAAMC,MAAN,CAAa,CAAb,EAAgBC,WAAhB,EAAP;KADG,CAAP;CADJ;;ACJA;;;AAGA,AAIA;AAEA,IAAMC,aAAuB,SAAvBA,UAAuB,CAACL,KAAD;QACrBM,QAAQN,KAAR,CAAJ,EAAoB;;eAETA,MAAMO,GAAN,CACH,UAACC,CAAD;mBACqBH,WAAWG,CAAX,CAAjB;SAFD,CAAP;;KAFJ,MAQO,IAAIC,SAAST,KAAT,CAAJ,EAAqB;;YAElBU,SAAiB,EAAvB;YACMC,OAAiBf,OAAOe,IAAP,CAAYX,KAAZ,CAAvB;;;;;;iCACgBW,IAAhB,8HAAsB;oBAAXC,CAAW;;oBACdH,SAAST,MAAMY,CAAN,CAAT,CAAJ,EAAwB;2BACLP,WAAWO,CAAX,CAAf,IAAgCP,WAAWL,MAAMY,CAAN,CAAX,CAAhC;iBADJ,MAEO,IAAIN,QAAQN,MAAMY,CAAN,CAAR,CAAJ,EAAuB;;;2BAGXP,WAAWO,CAAX,CAAf,IAAgCZ,MAAMY,CAAN,CAAhC;iBAHG,MAIA;2BACYP,WAAWO,CAAX,CAAf,IAAgCZ,MAAMY,CAAN,CAAhC;;;;;;;;;;;;;;;;;;eAIDF,MAAP;KAhBG,MAiBA,IAAIG,SAASb,KAAT,CAAJ,EAAqB;;eAEjBc,MAAMd,KAAN,CAAP;KAFG,MAGA;eACIA,KAAP;;CA9BR;;;;"}